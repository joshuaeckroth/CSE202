#disable-tables t

* Motivation

It is a very rare program that solves a problem with the exact same
sequence of operations every time it is executed. What is more common
is a program that does some operations if the data or user input looks
a certain way, and a different set of operations if the data looks a
different way.

The way we can do this in C++ is with "conditionals." The word
"conditional" means that some operations will only occur if a certain
"condition" is true.

For example, consider the program that gives the user three attempts
to guess a number between 1 and 10. Here is what the program should do
(in pseudo-code):

  - Ask the user for the first guess. Save this guess into a variable
    called =guess1=.

  - If =guess1= is the correct guess, then tell the user "Success!" and
    quit.

  - If =guess1= is not the correct guess, then tell the user "Nope. Try
    another guess." and save the second guess into a variable called
    =guess2=.

  - If =guess2= is the correct guess, then tell the user "Success!" and
    quit.

  - If =guess2= is not the correct guess, then tell the user "Nope. Try
    another guess." and save the third guess into a variable called
    =guess3=.

  - If =guess3= is the correct guess, then tell the user "Success!" and
    quit.

  - If =guess3= is not the correct guess, then tell the user "Nope. You
    are not allowed any more guesses, sorry! The number you failed to
    guess was [the number]." (where "the number" is the real number).
  

* How to do it in code

In C++, we have a command called =if=. This is what it looks like:

<src lang="c++">
if(...something...)
{
    // do stuff...
}
</src>

Of course, we need to change the phrase =...something...= to a
"conditional." The =if= command expects something that results in a =bool=
value. So we can use =bool= values like =true= and =false=:

<src lang="c++">
if(true)
{
    // do stuff...
}
if(false)
{
    // do stuff...
}
</src>

But these conditionals (=true= and =false=) are not very interesting
because in the first case, the stuff inside the =if= block will always
be executed (a "block" is the stuff being ={= and =}=). In the second
case, the stuff in the block will never be executed.

More interesting conditionals may involve the following boolean
operators (assuming =p= and =q= are =bool= variables and =x= is an =int=
variable):
  
  - =!p= -- "not p" or "opposite of the value that p has"

  - =p || q= -- "p or q"

  - =p && q= -- "p and q"

  - <code>x == 5</code> -- "the value in the variable x is equal
    to 5"

  - <code>x != 5</code> -- "the value in the variable x is not
    equal to 5"

  - =x < 5=

  - =x > 5=

  - <code>x <= 5</code> -- "the value in the variable x is less
    than or equal to 5"

  - <code>x >= 5</code>

  - <code>(x >= 0) && (x <= 5)</code> -- "x is between 0 and 5"
    (x can be one of [0,1,2,3,4,5]); note that you *cannot* say
    <code>(0 <= x <= 5) (wrong!)</code>
  

So we can write our guessing program like this:

<src lang="c++">
#include <iostream>
using namespace std;
int main()
{
    int answer = 8;
    int guess;
    
    cout << "Enter first guess: ";
    cin >> guess;

    if(answer == guess)
    {
        cout << "Success!";
        return 0;
    }
  
    cout << "Nope. Try another guess." << endl;
    cout << "Enter second guess: ";
    cin >> guess;
    
    if(answer == guess)
    {
        cout << "Success!";
        return 0;
    }
    
    cout << "Nope. Try another guess." << endl;
    cout << "Enter third guess: ";
    cin >> guess;

    if(answer == guess)
    {
        cout << "Success!";
        return 0;
    }
    
    cout << "Nope. You are not allowed any more guesses, sorry!" << endl;
    cout << "The number you failed to guess was " << answer << endl;
    
    return -1;
}
</src>

* if/else

Besides =if= we can also use =else= to specify some operations that should
be executed if the conditional is *not* satisfied. Example:

<src lang="c++">
if(x == 5)
{
    cout << "x equals 5!" << endl;
}
else
{
    cout << "x does not equal 5!" << endl;
}
</src>

* Nested if's

=if= commands can be inside other =if= (or =else=) blocks:

<src lang="c++">
if(x < 5)
{
    if(x < 0)
    {
        cout << "x is less than 0!" << endl;
    }
    else
    {
        cout << "x is less than 5 but not less than 0!" << endl;
    }
}
else
{
    cout << "x is not less than 5!" << endl;
}
</src>

* Series of if/else's

It is common practice to check a series of conditions, where you only
expect one of them to be true:

<src lang="c++">
if(x == 0)
{
    // do stuff...
}
else if(x == 1)
{
    // do stuff...
}
else if(x == 2)
{
    // do stuff...
}
else
{
    // fallback...
}
</src>

* "switch" statements

An alternative to the above example (series of if/else's) is the
=switch= statement. The =switch= statement is the same as a series of
if/else's because only one of the conditions should turn out to be
true. The =switch= statement can only handle simple conditions,
however; actually, it can only handle conditions of the form "is some
integer equal to some value?" This means that a =switch= statement can
only be used for integers.

Here is an example.

<src lang="c++">
#include <iostream>
using namespace std;
int main()
{
    int number;
    cout << "Enter a number 1-4: ";
    cin >> number;
    
    switch(number)
    {
    case 1:
        cout << "You entered the number 1." << endl;
        break;
    case 2:
        cout << "You entered the number 2." << endl;
        break;
    case 3:
        cout << "You entered the number 3." << endl;
        break;
    case 4:
        cout << "You entered the number 4." << endl;
        break;
    default:
        cout << "You must have entered some other number." << endl;
    }
    
    return 0;
}
</src>

The =switch= statement above can be rewritten with a series of
if/else's:

<src lang="c++">
// the following is the same as the "switch" statement above
if(number == 1)
{
    cout << "You entered the number 1." << endl;
}
else if(number == 2)
{
    cout << "You entered the number 2." << endl;
}
else if(number == 3)
{
    cout << "You entered the number 3." << endl;
}
else if(number == 4)
{
    cout << "You entered the number 4." << endl;
}
else
{
    cout << "You must have entered some other number." << endl;
}
</src>

Notice that an =if= is much more powerful: you can use very complicated
conditionals. However, a =switch= is very simple: for each "case", you
provide a value that is compared to the variable used in the switch
(in this case, the variable used in the switch is "number"). Each case
basically asks, "does the value in the variable equal this number?"

Each "case" in a =switch= needs a "break" at the end so that the next
case is not entered. It's good practice to always include a "break" at
the end of each case in a =switch=.

The "default" case is the case that is used if all the other cases
fail.

You can also use a =switch= to determine which character a user typed,
since characters are themselves just integers. Here is an example:

<src lang="c++">
#include <iostream>
using namespace std;
int main()
{
    char letter;
    cout << "Enter a letter: ";
    cin >> letter;
    
    switch(letter)
    {
    case 'a':
        cout << "You entered the letter 'a'." << endl;
        break;
    case 'b':
        cout << "You entered the letter 'b'." << endl;
        break;
    default:
        cout << "You must have entered some other letter." << endl;
    }
    
    return 0;
}
</src>

* Readings (not required)

  - Textbook (Etter & Ingber): pp 86-96

  - cplusplus.com: [[http://www.cplusplus.com/doc/tutorial/control/][Control structures]] (top and bottom of page; middle
    of page is about loops)

  - learncpp.com: [[http://www.learncpp.com/cpp-tutorial/52-if-statements/][if statements]]; [[http://www.learncpp.com/cpp-tutorial/53-switch-statements/][switch statements]]

  - Teach yourself C++ in 21 days: [[http://newdata.box.sk/bx/c/htm/ch04.htm][Expressions and statements]]

  - Learning C++: [[http://www.isotton.com/devel/docs/lcpp/unpacked/node7.html][Make decisions]]

  - Videos: [[http://xoax.net/comp/cpp/console/Lesson7.php][if statements]]; [[http://xoax.net/comp/cpp/console/Lesson27.php][switch statements]]

