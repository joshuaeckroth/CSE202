* Motivation

Anything a =while= loop can do, a =for= loop can do, and vice
versa. However, each kind of loop is used equally often in practice
because they have slightly different "styles."  First, we will look at
how =for= loops work.

This is the basic structure of a =for= loop:

<src lang="c++">
for(initialization; conditional; update)
{
    // do stuff...
}
</src>

This is what the three parts inside the parentheses (commonly) mean:
  
  - =initialization= -- create counting variables and set their values

  - =conditional= -- determine if the loop should repeat; this
    conditional usually refers to a variable defined in the
    =initialization=

  - =update= -- commonly used to change a variable defined in the
    =initialization= and referred to in the =conditional=; changing this
    variable should eventually cause the conditional to be false,
    causing the loop to complete

=for= loops follow this sequence of steps:

  1. execute whatever is put in the =initialization=

  2. check the =conditional=; if it evaluates to =false= (=0=) then skip the
     loop; if it evaluates to =true= (any integer not equal to =0=),
     continue to the next step

  3. execute the =stuff= inside the block

  4. execute the =update=

  5. go to step 2

It's useful to see how a =while= loop can be converted to a =for= loop. In
this example, the =while= loop and the =for= loop are (nearly) equivalent:

<src lang="c++">
int i = 0;
while(i < 10)
{
    // do stuff...
    i++;
}

for(int i = 0; i < 10; i++)
{
    // do stuff...
}
</src>

(The two are only "nearly" equivalent for the following reason: in the
=while= loop case, the integer =i= is declared outside of the loop, so
code that follows the loop block can still refer to =i=. In the =for= loop
case, the integer =i= can only be used inside the =for= loop block; it
does not exist when the loop is finished.)

Let's dissect that =for= loop above:

  - =initialization= -- <code>int i = 0</code>

  - =conditional= -- =i < 10=

  - =update= -- =i++=
  

You should be able to see these same three components present in the
=while= loop, but the =while= loop does not have special handling of the
three components. On the other hand, a =for= loop is specifically
designed to have exactly those three components (initialization,
conditional, and update).

A =for= loop need not have anything in any of the three components. If
none of the components have code in them, it is equivalent to an
infinite loop. In other words, these two loops are equivalent:

<src lang="c++">
while(true)
{
    // do stuff forever... (or until "break" is encountered)
}
for(;;)
{
    // do stuff forever... (or until "break" is encountered)
}
</src>

Here is the bottles-of-beer example again, this time using a =for= loop:

<src lang="c++">
for(int n = 99; n > 1; n--)
{
    cout << n << " bottles of beer..." << "take one down..."
         << (n-1) << " bottles of beer..." << endl;
}
cout << "1 bottle of beer ..." << endl;
</src>

Here is an example that is equivalent to

<quote>
<math>\sum_{j=1}^{100} \sum_{k=1}^{100} (j+k)^2</math>
</quote>

<src lang="c++">
int sum = 0;
for(int j = 1; j <= 100; j++)
{
    for(int k = 1; k <= 100; k++)
    {
        sum += (j+k)*(j+k);
    }
}
</src>

Here is an example that prints a triangle of stars:

<src lang="c++">
// the maximum width of a line of stars
int width = 30;

// print 2 stars, then 4 stars, etc., centered on the line
for(int i = 2; i <= width; i += 2)
{
    // we want to print "i" stars in the middle of the line,
    // so we need to add spaces before the stars, then print
    // the stars (we don't need spaces after the stars, just
    // a newline)
    
    // print spaces
    for(int j = 0; j < ((width - i) / 2); j++)
    {
        cout << " ";
    }
    
    // print stars
    for(int j = 0; j < i; j++)
    {
        cout << "*";
    }
    
    // print newline
    cout << endl;
}
</src>
  
Here is the result:

<example>
              **
             ****
            ******
           ********
          **********
         ************
        **************
       ****************
      ******************
     ********************
    **********************
   ************************
  **************************
 ****************************
******************************

</example>

Let's fix that extra blank line at the bottom. We will check if the
loop is on the last iteration; if it is, we don't print the last line:

<src lang="c++">
// the maximum width of a line of stars
int width = 30;

// print 2 stars, then 4 stars, etc., centered on the line
for(int i = 2; i <= width; i += 2)
{
    // we want to print "i" stars in the middle of the line,
    // so we need to add spaces before the stars, then print
    // the stars (we don't need spaces after the stars, just
    // a newline)
    
    // print spaces
    for(int j = 0; j < ((width - i) / 2); j++)
    {
        cout << " ";
    }
   
    // print stars
    for(int j = 0; j < i; j++)
    {
        cout << "*";
    }
    
    // print newline only if we aren't on the last line
    if(i != width)
    {
        cout << endl;
    }
}
</src>

Notice that in each of these examples, we are doing =stuff= some
particular number of times (the number of times is already known, like
=100=, or stored in an integer or a calculation, such as =((width - i)
/ 2)=).  These are the typical use cases for the =for= loop.

* Diagram of for() loop (and while() loop)

[[loops-diagram.png]]

* Readings (not required)

  - Textbook (Etter & Ingber): pp 99-102

  - cplusplus.com: [[http://www.cplusplus.com/doc/tutorial/control/][Control structures]] (second half of page)

  - learncpp.com: [[http://www.learncpp.com/cpp-tutorial/57-for-statements/][for loops]]

  - Teach yourself C++ in 21 days: [[http://newdata.box.sk/bx/c/htm/ch07.htm][More program flow]] (second half)

  - Learning C++: [[http://www.isotton.com/devel/docs/lcpp/unpacked/node8.html][Loops]] (second half)

  - Videos: [[http://xoax.net/comp/cpp/console/Lesson16.php][for loops]]
