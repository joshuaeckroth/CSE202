* Motivation

Vectors are just improved arrays. As we have seen, arrays can be a
real hassle. They don't know how big they are, they can't grow, and we
can't "return" an array from a function. C++ introduced vectors so
that we can avoid those issues.

Arrays are used more often, however, only because they are simple and
the computer can work with them more efficiently. But vectors are
usually much more convenient for the programmer. (Note that vectors
are really just arrays with some fancy functions.)

* Vector usage

Vectors are one of many "containers" introduced in C++. A container
holds data. Recall that when you created an array, you had to decide
what kind of array it was going to be (ints, doubles, etc.). The same
is true with vectors, except that the type is specified a little
differently (as it is with all "containers" in C++).

Here is how you create a vector full of ints:

<src lang="c++">
vector<int> myvec;
</src>

(Don't forget =#include <vector>= at the top of your files when you use
vectors).

If you want doubles instead:

<src lang="c++">
vector<double> vals;
</src>

It's not possible to have a vector full of doubles *and* ints, for
example ("heterogeneous" containers are not possible).

You can put elements in your vector with several methods. Most common
is =push_back=:

<src lang="c++">
vector<double> vals;
vals.push_back(5.3);
vals.push_back(0.66);
</src>

More examples are shown below.

* Example 1 - simple vector

<src lang="c++">
#include <iostream>
#include <vector>  // this is necessary to use vectors
using namespace std;

int main()
{
    vector<int> vals;
    vals.push_back(5);
    vals.push_back(6);
    vals.push_back(1);

    cout << "Size of vals: " << vals.size() << endl;
    for(int i = 0; i < vals.size(); i++)
    {
        cout << "Value at index " << i
             << " is " << vals[i] << endl;
    }
    return 0;
}
</src>

Output:

<example>
Size of vals: 3
Value at index 0 is 5
Value at index 1 is 6
Value at index 2 is 1
</example>

* Example 2 - vector with initial values

You can create a vector of some specific size and give it an initial
(repeated) value. This is most often used to give a vector a bunch of
zeros.

<src lang="c++">
#include <iostream>
#include <vector>
using namespace std;

int main()
{
    // create a vector of size 10,
    // with every element equal to 0
    vector<int> vals(10, 0);
    vals.push_back(5);
    vals.push_back(6);
    vals.push_back(1);

    cout << "Size of vals: " << vals.size() << endl;
    for(int i = 0; i < vals.size(); i++)
    {
        cout << "Value at index " << i
             << " is " << vals[i] << endl;
    }
    return 0;
}
</src>

Output:

<example>
Size of vals: 13
Value at index 0 is 0
Value at index 1 is 0
Value at index 2 is 0
Value at index 3 is 0
Value at index 4 is 0
Value at index 5 is 0
Value at index 6 is 0
Value at index 7 is 0
Value at index 8 is 0
Value at index 9 is 0
Value at index 10 is 5
Value at index 11 is 6
Value at index 12 is 1
</example>

* Example 3 - clearing a vector

The =clear()= function deletes all the values in the vector.

<src lang="c++">
#include <iostream>
#include <vector>
using namespace std;

int main()
{
    // create a vector of size 10,
    // with every element equal to 0
    vector<int> vals(10, 0);
    vals.push_back(5);
    vals.push_back(6);
    vals.push_back(1);

    cout << "Size of vals: " << vals.size() << endl;
    for(int i = 0; i < vals.size(); i++)
    {
        cout << "Value at index " << i
             << " is " << vals[i] << endl;
    }

    vals.clear();
    cout << "Size of vals: " << vals.size() << endl;

    return 0;
}
</src>

Output:

<example>
Size of vals: 13
Value at index 0 is 0
Value at index 1 is 0
Value at index 2 is 0
Value at index 3 is 0
Value at index 4 is 0
Value at index 5 is 0
Value at index 6 is 0
Value at index 7 is 0
Value at index 8 is 0
Value at index 9 is 0
Value at index 10 is 5
Value at index 11 is 6
Value at index 12 is 1
Size of vals: 0
</example>

* Example 4 - vector of strings

You can put anything in vectors, even strings (which are themselves
more-or-less vectors, too). (You can put vectors inside vectors, ad
nauseum).

<src lang="c++">
#include <iostream>
#include <vector>
#include <string>
using namespace std;

int main()
{
    vector<string> names;
    names.push_back("Euler");
    names.push_back("Descartes");
    names.push_back("Turing");
    names.push_back("Church");

    cout << "Size of names: " << names.size() << endl;
    for(int i = 0; i < names.size(); i++)
    {
        cout << "Name at index " << i
             << " is " << names[i] << endl;
    }

    return 0;
}
</src>

Output:

<example>
Size of names: 4
Name at index 0 is Euler
Name at index 1 is Descartes
Name at index 2 is Turing
Name at index 3 is Church
</example>

* Example 5 - using the empty() function

The =clear()= function deletes all the values in the vector. The =empty()=
function tells us if a vector has no values.

<src lang="c++">
#include <iostream>
#include <vector>
#include <string>
using namespace std;

int main()
{
    vector<string> names;
    names.push_back("Euler");
    names.push_back("Descartes");
    names.push_back("Turing");
    names.push_back("Church");

    names.clear();

    if(names.empty())
    {
        cout << "Names vector is empty." << endl;
    }
    else
    {
        cout << "Names vector is not empty." << endl;
    }

    return 0;
}
</src>

Output:

<example>
Names vector is empty.
</example>

* Example 6 - sorting

It turns out we only need those sort functions from an earlier lecture
if we are using arrays. Vectors can sort themselves (using the "quick
sort" technique).

<src lang="c++">
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

int main()
{
    vector<string> names;
    names.push_back("Euler");
    names.push_back("Descartes");
    names.push_back("Turing");
    names.push_back("Church");

    sort(names.begin(), names.end());

    for(int i = 0; i < names.size(); i++)
    {
        cout << "Name at index " << i
             << " is " << names[i] << endl;
    }

    return 0;
}
</src>

Output:

<example>
Name at index 0 is Church
Name at index 1 is Descartes
Name at index 2 is Euler
Name at index 3 is Turing
</example> 

* Example 7 - random shuffling

The reverse of sorting is shuffling; sometimes useful to randomize the
order of our data for experiments.

<src lang="c++">
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <ctime>
#include <cstdlib>
using namespace std;

int main()
{
    srand(time(NULL));

    vector<string> names;
    names.push_back("Euler");
    names.push_back("Descartes");
    names.push_back("Turing");
    names.push_back("Church");
    names.push_back("Curry");
    names.push_back("Gauss");
    names.push_back("Riemann");
    names.push_back("McCarthy");
    names.push_back("Hopper");
    names.push_back("Lovelace");

    sort(names.begin(), names.end());

    cout << "--Sorted names:" << endl;
    for(int i = 0; i < names.size(); i++)
    {
        cout << names[i] << endl;
    }
    cout << endl;

    random_shuffle(names.begin(), names.end());

    cout << "--Randomly shuffled names:" << endl;
    for(int i = 0; i < names.size(); i++)
    {
        cout << names[i] << endl;
    }

    return 0;
}
</src>

Output:

<example>
--Sorted names:
Church
Curry
Descartes
Euler
Gauss
Hopper
Lovelace
McCarthy
Riemann
Turing

--Randomly shuffled names:
Curry
Hopper
Turing
Descartes
Gauss
Lovelace
McCarthy
Church
Euler
Riemann
</example>

* Example 8 - passing a vector to a function

When you pass a vector to the function, the whole package is copied
and given to the function; so if you change the vector in the
function, the rest of the world is not affected. Also note that while
you have to provide a function the size of the array when you use
arrays and functions together, the vector already knows how big it is,
so we don't need a "size" parameter.

<src lang="c++">
#include <iostream>
#include <vector>
using namespace std;

int sum(vector<int> vals)
{
    int sum = 0;
    for(int i = 0; i < vals.size(); i++)
    {
        sum += vals[i];
    }
    return sum;
}

int main()
{
    vector<int> xs;
    
    for(int i = 0; i < 1000; i++)
    {
        xs.push_back(i + 1);
    }

    cout << "Sum of integers 1 to 1000: " << sum(xs) << endl;

    return 0;
}
</src>

Output:

<example>
Sum of integers 1 to 1000: 500500
</example>

* Example 9 - reading file data into vectors

<src lang="c++">
#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

int main()
{
    string filename;
    ifstream file;
    double val;
    vector<double> vals;
    
    cout << "Enter file name: ";
    getline(cin, filename);
    file.open(filename.c_str());
    if(!file.is_open())
    {
        cout << "Error opening file." << endl;
        return -1;
    }

    while(file >> val)
    {
        vals.push_back(val);
    }
    file.close();

    for(int i = 0; i < vals.size(); i++)
    {
        cout << vals[i] << endl;
    }

    return 0;
}
</src>

* Example 10 - reading three columns of file data into an array of vectors

<src lang="c++">
#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

int main()
{
    string filename;
    ifstream file;
    double val1, val2, val3;
    vector<double> vals[3];
    
    cout << "Enter file name: ";
    getline(cin, filename);
    file.open(filename.c_str());
    if(!file.is_open())
    {
        cout << "Error opening file." << endl;
        return -1;
    }

    while(file >> val1 >> val2 >> val3)
    {
        vals[0].push_back(val1);
        vals[1].push_back(val2);
        vals[2].push_back(val3);
    }
    file.close();

    for(int i = 0; i < vals[0].size(); i++)
    {
        cout << "col 1: " << vals[0][i]
             << ", col 2: " << vals[1][i]
             << ", col 3: " << vals[2][i]
             << endl;
    }

    return 0;
}
</src>

Input file:

<example>
3.7 32.2 0.0
68.4 37.2 95.2
12.9 26.4 82.0
</example>

Output:

<example>
Enter file name: input.txt
col 1: 3.7, col 2: 32.2, col 3: 0
col 1: 68.4, col 2: 37.2, col 3: 95.2
col 1: 12.9, col 2: 26.4, col 3: 82
</example>

* Example 11 - returning a vector from a function

While arrays cannot be returned by a function, vectors can, in the
usual way:

<src lang="c++">
#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

vector<double> repeatThree(vector<double> vals)
{
    vector<double> repeatedVals;

    for(int i = 0; i < vals.size(); i++)
    {
        repeatedVals.push_back(vals[i]);
        repeatedVals.push_back(vals[i]);
        repeatedVals.push_back(vals[i]);
    }
    
    return repeatedVals;
}

int main()
{
    string filename;
    ifstream file;
    double val;
    vector<double> vals;
    
    cout << "Enter file name: ";
    getline(cin, filename);
    file.open(filename.c_str());
    if(!file.is_open())
    {
        cout << "Error opening file." << endl;
        return -1;
    }

    while(file >> val)
    {
        vals.push_back(val);
    }
    file.close();

    vector<double> newVals = repeatThree(vals);

    for(int i = 0; i < newVals.size(); i++)
    {
        cout << newVals[i] << endl;
    }

    return 0;
}
</src>

* Example 12 - passing a vector by reference to a function

<src lang="c++">
#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

void repeatThree(vector<double> &vals)
{
    vector<double> repeatedVals;

    for(int i = 0; i < vals.size(); i++)
    {
        repeatedVals.push_back(vals[i]);
        repeatedVals.push_back(vals[i]);
        repeatedVals.push_back(vals[i]);
    }
    
    vals = repeatedVals;
}

int main()
{
    string filename;
    ifstream file;
    double val;
    vector<double> vals;
    
    cout << "Enter file name: ";
    getline(cin, filename);
    file.open(filename.c_str());
    if(!file.is_open())
    {
        cout << "Error opening file." << endl;
        return -1;
    }

    while(file >> val)
    {
        vals.push_back(val);
    }
    file.close();

    repeatThree(vals);

    for(int i = 0; i < vals.size(); i++)
    {
        cout << vals[i] << endl;
    }

    return 0;
}
</src>

* Strings are (just like) vectors

Interestingly enough, strings are just vectors of =char= things (more or
less). We can use the same vector functions on strings (mostly). For
example, we can ask a string its size (=s.size()=), reverse it
(=s.reverse()=), etc.

* Readings (not required)

  - Textbook (Etter & Ingber): pp 270-276

  - cplusplus.com: (none)

  - learncpp.com: Look at Chapter 17 at [[http://www.learncpp.com/]] (covers strings)

  - Teach yourself C++ in 21 days: (none)

  - Learning C++: (none)

  - Videos: [[http://xoax.net/comp/cpp/console/Lesson46.php][Using STL strings]]
